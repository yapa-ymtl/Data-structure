
class node//Node class
{
public:
	node* next;
	int data;
};

class stack//Stack class
{
	node* top;
	node* getfstnode();//Get first node
public:
	stack() { top = NULL; }//Constructor set top value to NULL
	void push(node*);//Insert an element into the stack
	int pop();//Delete and return the top element from the stack
	void print();//Print the value of all elements in the stack from the top to bottom
	stack reverse();//Reverse all the values in the stack
	int count();//Number of elements in the current stack
	void dele_list();
};

void stack::push(node* n)
{
	if (top== NULL)//Add node to frist
	{
		top = n;
		n->next = NULL;
	}
	else
	{
		n->next = top;
		top = n;
	}
}

int stack::pop()
{
	if (top == NULL)//Check underflow
	{
		cout << "\nStack is empty.\n\n";
	}
	else
	{
		int copy;
		node* ptr = top;
		copy = ptr->data;
		top = top->next;
		delete[]ptr;//Delete the node
		return copy;//Return the data of node
	}
}

void stack::print()
{
	if (top == NULL)//Check underflow
	{
		cout << "\nStack is empty.\n\n";
	}
	else
	{
		node* ptr = top;
		cout << "***Stack List***\n";
		while (ptr != NULL)
		{
			cout << "->" << ptr->data << endl;
			ptr = ptr->next;
		}
	}
}

node* stack::getfstnode()
{
	node* ptr = top;
	while (ptr->next != NULL)
	{
		ptr = ptr->next;
	}
	return ptr;
}

stack stack::reverse()
{
	stack temp_stack;
	if (top == NULL)//Check underflow
	{
		cout << "\nStack is empty.\n\n";
		return temp_stack;
	}
	else
	{
		
		node* ptr = top;
		while (ptr != NULL)//Copy stack to another stack
		{
			node* temp_node = new node();
			temp_node->data = ptr->data;
			temp_stack.push(temp_node);
			ptr = ptr->next;
			
		}
		delete ptr;//delete node after copying
		return temp_stack;
	}
}

int stack::count()
{
	int total = 0;
	node* ptr = top;
	while (ptr != NULL)
	{
		total++;
		ptr = ptr->next;
	}
	return total;
}

void stack::dele_list()
{
	while (top!= NULL)
	{
		pop();
	}
}
